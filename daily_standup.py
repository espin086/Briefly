import streamlit as st

from gpt import generate_completion

import config


HOW_TO_SUMMARIZE = """ You need to provide an update for a daily stand-up. 
This update should be no longer than 15 minutes in the agile/scrum methodology.

It should accomplish the following:

- show how busy you are
- show what you are working on
- show what you have accomplished
- show what you are planning to do next
- show what you need help with

Formatting Guide:

- your response will be in three sections: accomplishments, plans, blockers
- use bold for the section headers
- use bullet points for each section
- start each bullet point with a verb and use the present tense, plus use the active voice and bold the verb

Example: Joined mutliple table and quality checked the ETL pipeline to ensure the data is accurate and complete.

"""


def render_title(role):
    """Render the title and a separator in the Streamlit app."""
    st.title("Daily Technical Update")
    st.write("---")
    st.write(f"Role: {role}")  # Display the user-selected role


def render_role_input():
    """Render a text input for the user to set their role."""
    return st.text_input("Enter your role:", "Software Engineer")


def render_text_area(section_title, help_text):
    """Render a text area component in the Streamlit app.

    Parameters:
        section_title (str): The title for this section.
        help_text (str): The help text for the text area.

    Returns:
        str: The text entered by the user in the text area.
    """
    return st.text_area("", help=help_text, key=section_title)


def render_summary_button():
    """Render a button for summarizing the input.

    Returns:
        bool: True if the button is clicked, False otherwise.
    """
    return st.button("Summarize", key="btn_summarize")


def get_summary(model, role, prompt):
    """Get a summary text generated by GPT.

    Parameters:
        model (str): The GPT model to use.
        role (str): The role description for the prompt.
        prompt (str): The prompt text to summarize.

    Returns:
        str: The generated summary text.
    """
    return generate_completion(model, role, prompt)


def main():
    """Main function to render the Streamlit app."""
    user_role = render_role_input()  # Get the user's selected role
    render_title(user_role)  # Pass the user's role to the title function

    st.header("What did you do today?")
    accomplishments_input = render_text_area(
        "What did you do today?", "Enter your daily accomplishments."
    )
    st.write("---")

    st.header("What will you do tomorrow?")
    todo_input = render_text_area(
        "What will you do tomorrow?", "Enter tomorrow's plans"
    )
    st.write("---")

    st.header("Any challenges/blockers for you?")
    blocked_input = render_text_area(
        "What is blocking you?", "What stands in your way?"
    )
    st.write("---")

    prompt = f"""Here is your task {HOW_TO_SUMMARIZE}. 
    Here are the accompolishments: {accomplishments_input}. 
    Here are the plans for tomorrow: {todo_input}. 
    Here are the blockers: {blocked_input}
    """

    if render_summary_button():
        summary = get_summary(config.GPT_MODEL, user_role, prompt)
        st.write(summary)


if __name__ == "__main__":
    main()
